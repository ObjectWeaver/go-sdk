syntax = "proto3";

package jsonSchema;

option go_package = "./grpc";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Definition message
message Definition {
  string type = 1;
  string instruction = 2;
  map<string, Definition> properties = 3;
  Definition items = 4;
  string model = 5;
  repeated string processingOrder = 6;
  string systemPrompt = 7;
  RequestFormat req = 8;
  Focus narrowFocus = 9;
  bool improvementProcess = 10;
  repeated string selectFields = 11;
  Choices choices = 12;
  bool voters = 13;
  HashMap hashMap = 14;
  TextToSpeech textToSpeech = 15;
  SpeechToText speechToText = 16;
  Image image = 17;
}

// Audio message
message TextToSpeech {
  string model = 1;
  string stringToAudio = 2;
  string format = 3;
  string voice = 4;
}

// SpeechToText message
message SpeechToText {
  string model = 1;
  bytes audioToTranscribe = 2;
}

// Image message
message Image {
  string model = 1;
  string size = 2;
}

// Choices message
message Choices {
  int32 number = 1;
  repeated string options = 2;
}

// HashMap message
message HashMap {
  string keyInstruction = 1;
  Definition fieldDefinition = 2;
}

// Focus message
message Focus {
  string prompt = 1;
  repeated string fields = 2;
  bool keepOriginal = 3;
}

// RequestFormat message
message RequestFormat {
  string url = 1;
  string method = 2;
  map<string, string> headers = 3;
  google.protobuf.Struct body = 4;  // This corresponds to Go's Body field as map<string, any>
  string authorization = 5;
  repeated string requireFields = 6;
}

// RequestBody message for the GenerateObject RPC
message RequestBody {
  string prompt = 1;
  Definition definition = 2;
}

// Updated Response message for the GenerateObject RPC
message Response {
  google.protobuf.Struct data = 1;  // Use Struct to hold a dynamic map<string, any>
  double usdCost = 2;
}

// StreamingResponse message for the stream method
message StreamingResponse {
  google.protobuf.Struct data = 1;  // Same as above, using Struct for map<string, any>
  double usdCost = 2;
  string status = 3;  // A status message for each streamed response
}

// The JSONSchemaService defines a service for generating JSON objects based on a schema definition.
service JSONSchemaService {
  // Standard request-response RPC
  rpc GenerateObject(RequestBody) returns (Response);

  // New method: Server-side streaming RPC
  rpc StreamGeneratedObjects(RequestBody) returns (stream StreamingResponse);
}
